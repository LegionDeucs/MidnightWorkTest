//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""PlayerVacuum"",
            ""id"": ""a9839f38-a6ce-41c1-821c-61f7747686f2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ef230fb6-4026-45ae-a698-856b41645d1a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TransitionToThrow"",
                    ""type"": ""Button"",
                    ""id"": ""98e8bbe9-e02a-43af-8abd-af6a5f20a68a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangePickUpItemType"",
                    ""type"": ""Button"",
                    ""id"": ""001394d1-d6dc-4065-a58d-70be1e05db58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba849319-0aa7-4983-8410-2077102d3267"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""336c0c90-101b-4070-9707-5fceaa396d09"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""82972b02-d09b-44c5-adc1-035dd4ca2b50"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""15592b2f-3e8a-4592-9675-d7356682dd2e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5452ef46-3660-419a-9d0a-d751f2409a02"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9919204b-2772-4e23-b140-7014e8f3b7e0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8a1e531e-a29e-4220-9b3e-ab7ae0b80358"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TransitionToThrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ca098e5-be6d-4ae5-aaf7-871083b2fd0b"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePickUpItemType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerThrow"",
            ""id"": ""e351e085-6435-41a3-8058-64c397bf5112"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bd803da2-02f3-460c-a4c7-433b7d5b29d5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TransitionToVacuum"",
                    ""type"": ""Button"",
                    ""id"": ""b1509377-b32a-4ac7-bfc0-8f4cd67373f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeThowItemType"",
                    ""type"": ""Button"",
                    ""id"": ""b4607634-dbe0-4f3c-8cea-3707146c20bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d4d1c418-aa00-4081-a29f-1f9968fc5d19"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2087b738-b269-4bb5-8451-cca43bb35dd6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d97a8712-7fc1-4334-92b3-27fee92f64eb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""009cf062-3f2b-42ad-b64f-bd9a7c754596"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""73928a20-58bf-4a92-a12e-d063ae1293b4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a49b4535-7437-4c4a-934f-bd90227b12b6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a114111e-9ea1-4290-8040-d74ab8010cb5"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TransitionToVacuum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32c22a04-9971-4df1-b8cc-6c87750ba31b"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeThowItemType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerVacuum
        m_PlayerVacuum = asset.FindActionMap("PlayerVacuum", throwIfNotFound: true);
        m_PlayerVacuum_Move = m_PlayerVacuum.FindAction("Move", throwIfNotFound: true);
        m_PlayerVacuum_TransitionToThrow = m_PlayerVacuum.FindAction("TransitionToThrow", throwIfNotFound: true);
        m_PlayerVacuum_ChangePickUpItemType = m_PlayerVacuum.FindAction("ChangePickUpItemType", throwIfNotFound: true);
        // PlayerThrow
        m_PlayerThrow = asset.FindActionMap("PlayerThrow", throwIfNotFound: true);
        m_PlayerThrow_Move = m_PlayerThrow.FindAction("Move", throwIfNotFound: true);
        m_PlayerThrow_TransitionToVacuum = m_PlayerThrow.FindAction("TransitionToVacuum", throwIfNotFound: true);
        m_PlayerThrow_ChangeThowItemType = m_PlayerThrow.FindAction("ChangeThowItemType", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerVacuum
    private readonly InputActionMap m_PlayerVacuum;
    private List<IPlayerVacuumActions> m_PlayerVacuumActionsCallbackInterfaces = new List<IPlayerVacuumActions>();
    private readonly InputAction m_PlayerVacuum_Move;
    private readonly InputAction m_PlayerVacuum_TransitionToThrow;
    private readonly InputAction m_PlayerVacuum_ChangePickUpItemType;
    public struct PlayerVacuumActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerVacuumActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerVacuum_Move;
        public InputAction @TransitionToThrow => m_Wrapper.m_PlayerVacuum_TransitionToThrow;
        public InputAction @ChangePickUpItemType => m_Wrapper.m_PlayerVacuum_ChangePickUpItemType;
        public InputActionMap Get() { return m_Wrapper.m_PlayerVacuum; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerVacuumActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerVacuumActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerVacuumActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerVacuumActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @TransitionToThrow.started += instance.OnTransitionToThrow;
            @TransitionToThrow.performed += instance.OnTransitionToThrow;
            @TransitionToThrow.canceled += instance.OnTransitionToThrow;
            @ChangePickUpItemType.started += instance.OnChangePickUpItemType;
            @ChangePickUpItemType.performed += instance.OnChangePickUpItemType;
            @ChangePickUpItemType.canceled += instance.OnChangePickUpItemType;
        }

        private void UnregisterCallbacks(IPlayerVacuumActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @TransitionToThrow.started -= instance.OnTransitionToThrow;
            @TransitionToThrow.performed -= instance.OnTransitionToThrow;
            @TransitionToThrow.canceled -= instance.OnTransitionToThrow;
            @ChangePickUpItemType.started -= instance.OnChangePickUpItemType;
            @ChangePickUpItemType.performed -= instance.OnChangePickUpItemType;
            @ChangePickUpItemType.canceled -= instance.OnChangePickUpItemType;
        }

        public void RemoveCallbacks(IPlayerVacuumActions instance)
        {
            if (m_Wrapper.m_PlayerVacuumActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerVacuumActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerVacuumActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerVacuumActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerVacuumActions @PlayerVacuum => new PlayerVacuumActions(this);

    // PlayerThrow
    private readonly InputActionMap m_PlayerThrow;
    private List<IPlayerThrowActions> m_PlayerThrowActionsCallbackInterfaces = new List<IPlayerThrowActions>();
    private readonly InputAction m_PlayerThrow_Move;
    private readonly InputAction m_PlayerThrow_TransitionToVacuum;
    private readonly InputAction m_PlayerThrow_ChangeThowItemType;
    public struct PlayerThrowActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerThrowActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerThrow_Move;
        public InputAction @TransitionToVacuum => m_Wrapper.m_PlayerThrow_TransitionToVacuum;
        public InputAction @ChangeThowItemType => m_Wrapper.m_PlayerThrow_ChangeThowItemType;
        public InputActionMap Get() { return m_Wrapper.m_PlayerThrow; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerThrowActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerThrowActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerThrowActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerThrowActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @TransitionToVacuum.started += instance.OnTransitionToVacuum;
            @TransitionToVacuum.performed += instance.OnTransitionToVacuum;
            @TransitionToVacuum.canceled += instance.OnTransitionToVacuum;
            @ChangeThowItemType.started += instance.OnChangeThowItemType;
            @ChangeThowItemType.performed += instance.OnChangeThowItemType;
            @ChangeThowItemType.canceled += instance.OnChangeThowItemType;
        }

        private void UnregisterCallbacks(IPlayerThrowActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @TransitionToVacuum.started -= instance.OnTransitionToVacuum;
            @TransitionToVacuum.performed -= instance.OnTransitionToVacuum;
            @TransitionToVacuum.canceled -= instance.OnTransitionToVacuum;
            @ChangeThowItemType.started -= instance.OnChangeThowItemType;
            @ChangeThowItemType.performed -= instance.OnChangeThowItemType;
            @ChangeThowItemType.canceled -= instance.OnChangeThowItemType;
        }

        public void RemoveCallbacks(IPlayerThrowActions instance)
        {
            if (m_Wrapper.m_PlayerThrowActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerThrowActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerThrowActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerThrowActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerThrowActions @PlayerThrow => new PlayerThrowActions(this);
    public interface IPlayerVacuumActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTransitionToThrow(InputAction.CallbackContext context);
        void OnChangePickUpItemType(InputAction.CallbackContext context);
    }
    public interface IPlayerThrowActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTransitionToVacuum(InputAction.CallbackContext context);
        void OnChangeThowItemType(InputAction.CallbackContext context);
    }
}
